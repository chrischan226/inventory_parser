{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["XLSX","require","App","props","state","data","foundRows","search","fileHandler","bind","filterRows","changeHandler","file","target","files","FR","FileReader","onload","Uint8Array","result","workbook","read","type","firstSheet","Sheets","SheetNames","utils","sheet_to_json","header","setState","readAsArrayBuffer","this","filter","row","join","indexOf","name","value","className","id","accept","onChange","placeholder","onClick","undefined","map","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAEMA,G,MAAOC,EAAQ,KAqFNC,E,YAlFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,KACNC,UAAW,GACXC,OAAQ,IAGV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAVJ,E,4EAaI,IAAD,OAChBG,EADgB,EAATC,OACOC,MAAM,GACxB,GAAKF,EAAL,CAEA,IAAIG,EAAK,IAAIC,WACbD,EAAGE,OAAS,YAAe,IAAbJ,EAAY,EAAZA,OACTR,EAAO,IAAIa,WAAWL,EAAOM,QAC7BC,EAAWpB,EAAKqB,KAAKhB,EAAM,CAACiB,KAAM,UAClCC,EAAaH,EAASI,OAAOJ,EAASK,WAAW,IACjDN,EAASnB,EAAK0B,MAAMC,cAAcJ,EAAY,CAAEK,OAAQ,IAE5D,EAAKC,SAAS,CACZxB,KAAMc,KAGVJ,EAAGe,kBAAkBlB,M,mCAGR,IAAD,EACYmB,KAAK3B,MAAtBC,EADK,EACLA,KAAME,EADD,EACCA,OACRD,EAAYD,EAAK2B,QAAO,SAAAC,GAEtB,IAAkC,IADlBA,EAAIC,KAAK,IACZC,QAAQ5B,GACnB,OAAO0B,KAIfF,KAAKF,SAAS,CACZvB,gB,uCAIqB,IAAVO,EAAS,EAATA,OACPuB,EAASvB,EAATuB,KACNL,KAAKF,SAAL,eACGO,EAAQvB,EAAOwB,U,+BAIV,IAAD,EACmBN,KAAK3B,MAAzBC,EADC,EACDA,KAAMC,EADL,EACKA,UACZ,OACE,yBAAKgC,UAAU,OACb,yBAAKA,UAAY,kBACf,uBAAGA,UAAY,SAAf,wBAEF,2BAAOhB,KAAK,OAAOiB,GAAG,QAAQC,OAAO,kBAAkBC,SAAYV,KAAKvB,cAC9D,OAATH,EACD,yBAAKiC,UAAY,mBACf,yBAAKA,UAAY,eACf,2BAAOhB,KAAK,OAAOiB,GAAG,SAASH,KAAO,SAASK,SAAYV,KAAKpB,cAAe+B,YAAY,2BAC3F,4BAAQJ,UAAY,SAASK,QAAWZ,KAAKrB,YAA7C,iBAIFkC,EAEa,OAAdtC,EACCA,EAAUuC,KAAI,SAAAZ,GACZ,OAAO,yBAAKK,UAAY,YAAYL,WAGtCW,O,GA5EQE,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3f746930.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nconst XLSX = require('xlsx');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      foundRows: [],\n      search: '',\n    }\n\n    this.fileHandler = this.fileHandler.bind(this);\n    this.filterRows = this.filterRows.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n  }\n\n  fileHandler({target}) {\n    let file = target.files[0];\n    if (!file) return;\n\n    var FR = new FileReader();\n    FR.onload = ({target}) => {\n     var data = new Uint8Array(target.result),\n         workbook = XLSX.read(data, {type: 'array'}),\n         firstSheet = workbook.Sheets[workbook.SheetNames[0]],\n         result = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });\n\n     this.setState({\n       data: result,\n     })\n   };\n   FR.readAsArrayBuffer(file);\n  }\n\n  filterRows() {\n    let { data, search } = this.state,\n        foundRows = data.filter(row => {\n          let rowString = row.join('');\n          if(rowString.indexOf(search) !== -1) {\n            return row;\n          }\n        })\n\n    this.setState({\n      foundRows,\n    })\n  }\n\n  changeHandler({target}) {\n    let { name } = target;\n    this.setState({\n      [name] : target.value,\n    })\n  }\n\n  render() {\n    let { data, foundRows } = this.state;\n    return (\n      <div className=\"App\">\n        <div className = 'titleContainer'>\n          <p className = 'title'>Search by Part Name</p>\n        </div>\n        <input type=\"file\" id=\"input\" accept=\".xls,.xlsx,.ods\" onChange = {this.fileHandler}/>\n        {data !== null ? \n        <div className = 'searchContainer'>\n          <div className = \"searchInput\">\n            <input type=\"text\" id=\"search\" name = \"search\" onChange = {this.changeHandler} placeholder='Search by Part Name...'/>\n            <button className = 'submit' onClick = {this.filterRows}>Search</button>\n          </div>\n        </div>\n        : \n          undefined\n        }\n        {foundRows !== null ? \n          foundRows.map(row => {\n            return <div className = 'foundRow'>{row}</div>  \n          })\n        : \n          undefined\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}